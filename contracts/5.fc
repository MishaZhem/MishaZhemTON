{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

int tuple_len(tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";

() recv_internal() {
}
;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
  tuple y = empty_tuple();
  int f_0 = 0; int f_1 = 1; int temp = 0; int i = 1;
  if (n >= 350) { i = 350; f_0 = 3865462327928467072415604609040860366007401579690263197296200323999931849; f_1 = 6254449428820551641549772190170184190608177514674331726439961915653414425;}
  elseif (n >= 300) { i = 300; f_0 = 137347080577163115432025771710279131845700275212767467264610201; f_1 = 222232244629420445529739893461909967206666939096499764990979600;}
  elseif (n >= 250) { i = 250; f_0 = 4880197746793002076754294951020699004973287771475874; f_1 = 7896325826131730509282738943634332893686268675876375;}
  elseif (n >= 200) { i = 200; f_0 = 173402521172797813159685037284371942044301; f_1 = 280571172992510140037611932413038677189525;}
  elseif (n >= 100) { i = 100; f_0 = 218922995834555169026; f_1 = 354224848179261915075;}
  elseif (n >= 50) { i = 50; f_0 = 7778742049; f_1 = 12586269025;}
  if (k == 0) { return y; }
  if (n == 0) { y~tpush(f_0); }
  int x = n + k;
  if (x == 371) { x = 370; }
  while (i < x){
    if (i >= n) {
      y~tpush(f_1);
    }
    i += 1;
    temp = f_0 + f_1;
    f_0 = f_1;
    f_1 = temp;
    ;; ~dump(i);
    ;; ~dump(f_0);
    ;; ~dump(f_1);
  }
  x = n + k;
  if (x == 371) { y~tpush(f_1); }
  return y;
}
