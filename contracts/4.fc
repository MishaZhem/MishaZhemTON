{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

(cell) solve(int shift, cell text){
  builder g = begin_cell();
  slice s = text.begin_parse();
  while (s.slice_data_empty?() != -1){
    int k = s~load_uint(8);
    if ((k >= 65) & (k <= 90)) {
      k = (k - 65 + shift) % 26 + 65;
    } elseif ((k >= 97) & (k <= 122)) {
      k = (k - 97 + shift) % 26 + 97; 
    }
    g~store_uint(k, 8);
  }
  if (s.slice_refs_empty?() != -1) { g = g.store_ref(solve(shift, s~load_ref())); }
  return g.end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;
  return solve(shift,text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  shift %= 26;
  return solve(shift - 2 * shift,text);
}
